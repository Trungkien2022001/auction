version: '3'
services:

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    # volumes:
    #   - ./nginx:/nginx.conf

  mysql:
    image: mysql:latest
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "${MYSQL_ALLOW_EMPTY_PASSWORD:-yes}"
      MYSQL_DATABASE: "${MYSQL_DATABASE:-auction}"
      MYSQL_USER: "${MYSQL_USER:-root}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD:-oke}"

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT:-6379}:6379"

  nodejs:
    build:
      context: ./api
      dockerfile: Dockerfile
    volumes:
      - ./api:/app
    ports:
      - "${NODEJS_PORT:-3030}:3030"
    depends_on:
      - redis
      - mysql
      - elasticsearch
      - kafka
    environment:
      REDIS_HOST: "${REDIS_HOST:-redis}"
      REDIS_PORT: "${REDIS_PORT:-6379}"
      MYSQL_HOST: "${MYSQL_HOST:-mysql}"
      MYSQL_PORT: "${MYSQL_PORT:-3306}"
      MYSQL_DATABASE: "${MYSQL_DATABASE:-auction}"
      MYSQL_USER: "${MYSQL_USER:-root}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD:-oke}"
      MYSQL_CONNECTION_URL: "${MYSQL_CONNECTION_URL}"
      ELASTIC_HOST: "${ELASTIC_HOST:-http://host.docker.internal:9200}"

  socketjs:
    build:
      context: ./api
      dockerfile: Dockerfile-socket
    volumes:
      - ./api:/app
    ports:
      - "${SOCKETJS_PORT:-3031}:3031"
    depends_on:
      - redis
      - mysql
    environment:
      REDIS_HOST: "${REDIS_HOST:-redis}"
      REDIS_PORT: "${REDIS_PORT:-6379}"
      MYSQL_HOST: "${MYSQL_HOST:-mysql}"
      MYSQL_PORT: "${MYSQL_PORT:-3306}"
      MYSQL_DATABASE: "${MYSQL_DATABASE:-auction}"
      MYSQL_USER: "${MYSQL_USER:-root}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD:-oke}"
      MYSQL_CONNECTION_URL: "${MYSQL_CONNECTION_URL}"
      ELASTIC_HOST: "${ELASTIC_HOST:-http://host.docker.internal:9200}"

  reactjs:
    build:
      context: ./client
      dockerfile: Dockerfile
    volumes:
      - ./client:/app
    ports:
      - "${REACTJS_PORT:-3000}:3000"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    ports:
      - "9200:9200"
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    expose:
      - "${KAFKA_EXTERNAL_PORT:-9093}"
    environment:
      KAFKA_ADVERTISED_LISTENERS: "INSIDE://kafka:9093,OUTSIDE://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_LISTENERS: "INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INSIDE"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"

  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
  
  nestjs:
    build:
      context: ./api-nest
      dockerfile: Dockerfile
    volumes:
      - ./api-nest:/app
    ports:
      - "${NESTJS_PORT:-4040}:4040"
    depends_on:
      - mysql

  springboot:
    build:
      context: ./api-springboot
      dockerfile: Dockerfile
    volumes:
      - ./api-springboot:/app
    ports:
      - "${SPRINGBOOT_PORT:-8080}:8080"
    depends_on:
      - mysql
